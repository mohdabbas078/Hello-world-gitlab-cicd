stages:
  - TEST
  - QUALITY
  - BUILD
  - DEPLOY

variables:
  IMAGE_NAME: "hello-world-application"
  DOCKER_IMAGE: "gcr.io/$PROJECT/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"

unit_test:
  stage: TEST
  image: python:3.10
  variables:
    PYTHONPATH: "${CI_PROJECT_DIR}"
  before_script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
  script:
    - pytest --cov=app --cov-report=html --cov-report=xml tests/
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+)%/'  
  artifacts:
    paths:
      - .pytest_cache
      - htmlcov/
      - coverage.xml
    reports:
      junit: coverage.xml
  rules:
    - if: '($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "dev" || $CI_COMMIT_REF_NAME == "stage") && $CI_PIPELINE_SOURCE != "pipeline"'  
      when: on_success
      allow_failure: false    

lint_code:
  stage: QUALITY
  image: python:3.10
  needs:
    - unit_test
  before_script:
    - pip install flake8
  script:
    - flake8 app || exit 1
    - echo "Code linting passed successfully ðŸŽ‰"
  rules:
    - if: '($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "dev" || $CI_COMMIT_REF_NAME == "stage") && $CI_PIPELINE_SOURCE != "pipeline"'  
      when: on_success
      allow_failure: false

sonar_scan_code:
  stage: QUALITY
  image: sonarsource/sonar-scanner-cli:latest
  needs:
    - lint_code
  script:
    - sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.sources=. -Dsonar.python.version=3.0
  rules:
    - if: '($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "dev" || $CI_COMMIT_REF_NAME == "stage") && $CI_PIPELINE_SOURCE != "pipeline"'  
      when: on_success
      allow_failure: false

build_docker:
  stage: BUILD
  image: docker:20.10.7
  needs:
    - sonar_scan_code
  services:
    - docker:dind
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker images
    - docker inspect $DOCKER_IMAGE
  rules:
    - if: '($CI_PIPELINE_SOURCE == "merge_request_event") && $CI_PIPELINE_SOURCE != "pipeline"'  
      when: on_success
      allow_failure: false  

push_docker:
  stage: DEPLOY
  image: google/cloud-sdk:slim
  services:
    - docker:dind
  needs:
    - sonar_scan_code  
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apt-get update && apt-get install -y docker.io
    - docker info 
  script:
    - docker build -t $DOCKER_IMAGE .
    - 'curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash'
    - gcloud auth activate-service-account --key-file=.secure_files/GOOGLE_APPLICATION_CREDENTIALS.json
    - gcloud auth configure-docker gcr.io --quiet
    - docker push "$DOCKER_IMAGE"  
  rules:
    - if: '($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "dev" || $CI_COMMIT_REF_NAME == "stage") && $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "merge_request_event"'  
      when: on_success
      allow_failure: false  

deploy_app:
  stage: DEPLOY
  image: google/cloud-sdk:latest
  needs:
    - push_docker
  script:
    - sed -i 's|\$DOCKER_IMAGE|'$DOCKER_IMAGE'|g' k8s/deployment.yaml
    - 'curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash'
    - gcloud auth activate-service-account --key-file=.secure_files/GOOGLE_APPLICATION_CREDENTIALS.json
    - gcloud container clusters get-credentials $CLUSTER --zone $ZONE --project $PROJECT
    - kubectl apply -f k8s/deployment.yaml
    - kubectl apply -f k8s/service.yaml
  rules:
    - if: '($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "dev" || $CI_COMMIT_REF_NAME == "stage") && $CI_PIPELINE_SOURCE != "pipeline" && $CI_PIPELINE_SOURCE != "merge_request_event"'  
      when: on_success
      allow_failure: false  
